name: Build and push image and deploy to k8s

on:
  push:
    branches:
      - '!feature/**'
      - develop
      - 'release/v**'
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  CACHE_DOCKER_IMAGE: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
  PUSH_DOCKER_IMAGE: ${{ github.event_name != 'pull_request' && !contains(github.ref,'feature/') }}
  CR_REPO: zgw/keycloak-with-theme

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      tagToDeploy: ${{ steps.prep.outputs.DOCKERTAG }}

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main

      - name: 'Retrieve styling'
        run : |
            npm ci --loglevel verbose
            npm run copy
            ls ./node_modules/@gemeente-denhaag/
            ls ./node_modules/@gemeente-denhaag/keycloak
            ls ./node_modules/@gemeente-denhaag/keycloak/dist
            npm run clean

      - name: 'Generate unique docker tag to deploy with Helm'
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            ts=$(date +%s)
            echo "::set-output name=DOCKERTAG::${branch}-${sha}-${ts}"

      - name: 'Docker meta'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.ZGW_PROD_ACR_URL }}/${{ env.CR_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha
            type=raw,value=test-latest,enable=${{ github.ref_name == 'develop' }}
            type=raw,value=acc-latest,enable=${{ contains(github.ref, 'release/v') }}
            ${{ steps.prep.outputs.DOCKERTAG }}

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v1

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v1

      - name: 'Login to acr'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ZGW_PROD_ACR_URL }}
          username: ${{ secrets.ZGW_PROD_ACR_TOKEN_USERNAME }}
          password: ${{ secrets.ZGW_PROD_ACR_TOKEN_PASSWORD }}

      - name: 'Set cache_to env'
        if: env.CACHE_DOCKER_IMAGE == 'true'
        run: echo "cache_to=type=gha,mode=max" >> $GITHUB_ENV

      - name: 'Build and push image'
        uses: docker/build-push-action@v2
        with:
          push: ${{ env.PUSH_DOCKER_IMAGE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: ${{ env.cache_to }}

  deploy-to-test:
    if: github.ref_name == 'develop'
    runs-on: ubuntu-latest
    needs: build
    environment: test

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main

      - name: 'Deploy to AKS'
        uses: Gemeente-DenHaag/custom-actions/deploy-to-aks@main
        # uses: Gemeente-DenHaag/custom-actions/deploy-to-aks@v0.0.3-dta
        with:
          api-server-url: '${{ secrets.ZGW_OTA_API_SERVER_URL }}'
          sa-secret: '${{ secrets.ZGW_TEST_SA_SECRET }}'
          release-name: keycloak
          values-files: infra/values.yaml,infra/values-test.yaml
          namespace: zgw-test
          full-image-url: ${{ secrets.ZGW_PROD_ACR_URL }}/${{ env.CR_REPO }}:${{ needs.build.outputs.tagToDeploy }}

  deploy-to-acc:
    if: contains(github.ref, 'release/v')
    runs-on: ubuntu-latest
    needs: build
    environment: acc

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main

      - name: 'Deploy to AKS'
        uses: Gemeente-DenHaag/custom-actions/deploy-to-aks@main
        # uses: Gemeente-DenHaag/custom-actions/deploy-to-aks@v0.0.3-dta
        with:
          api-server-url: '${{ secrets.ZGW_OTA_API_SERVER_URL }}'
          sa-secret: '${{ secrets.ZGW_ACC_SA_SECRET }}'
          release-name: keycloak
          values-files: infra/values.yaml,infra/values-acc.yaml
          namespace: zgw-acc
          full-image-url: ${{ secrets.ZGW_PROD_ACR_URL }}/${{ env.CR_REPO }}:${{ needs.build.outputs.tagToDeploy }}
