## Configure the ingress resource that allows you to access the
## app installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: keycloak-zgw.acc.denhaag.nl

  ## Specify a tls secret which already exists. tls must be set to true
  ##
  existingTlsSecret: zgw-tls-secret

  ingressClassName: nginx
  
  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

##
## Autoscaling configuration
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  # targetCPU: 50
  # targetMemory: 50

##
## An array to add env vars
##
env:
  - name: KC_HOSTNAME
    value: '{{ .Values.ingress.hostname }}'
  - name: KC_LOG_LEVEL
    value: INFO,org.keycloak.services:DEBUG,org.keycloak.services.scheduled:INFO,org.keycloak.authentication:DEBUG,org.apache.http:DEBUG,org.keycloak.broker:DEBUG
    # value: DEBUG,org.hibernate:INFO,freemarker.cache:INFO,org.keycloak.transaction:INFO,io.smallrye.context.jta.context.propagation:INFO,org.keycloak.services.scheduled:INFO,io.quarkus.vertx.http:INFO,org.postgresql.jdbc:INFO
  # - name: KC_HTTPS_PROTOCOLS
  #   value: TLSv1.3
  # - name: PROXY_ADDRESS_FORWARDING
  #   value: "true"
    # INFO #DEBUG,org.hibernate:INFO

##
## Sync objects from Azure keyvault to kubernetes as secrets
##
syncAKV:
  sync-1:
    vaultname: kv-zgw-ota-weu-01
    objectname: keycloak-acc-keycloak-admin
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: KEYCLOAK_ADMIN
  sync-2:
    vaultname: kv-zgw-ota-weu-01
    objectname: keycloak-acc-keycloak-admin-password
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: KEYCLOAK_ADMIN_PASSWORD
  sync-3:
    vaultname: kv-zgw-ota-weu-01
    objectname: keycloak-acc-kc-db-url
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: KC_DB_URL
  sync-4:
    vaultname: kv-zgw-ota-weu-01
    objectname: keycloak-acc-kc-db-username
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: KC_DB_USERNAME
  sync-5:
    vaultname: kv-zgw-ota-weu-01
    objectname: keycloak-acc-kc-db-password
    objecttype: secret
    output:
      secret:
        name: '{{ include "app.fullname" . }}'
        dataKey: KC_DB_PASSWORD

extraObjects:
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    annotations:
      # appgw.ingress.kubernetes.io/cookie-based-affinity: "true"
      # appgw.ingress.kubernetes.io/request-timeout: "30"
      appgw.ingress.kubernetes.io/ssl-redirect: "true"
      appgw.ingress.kubernetes.io/health-probe-path: "/health"
      appgw.ingress.kubernetes.io/rewrite-rule-set: zgw-rewriteset1
      meta.helm.sh/release-name: '{{ include "common.names.fullname" . }}'
      meta.helm.sh/release-namespace: '{{ .Release.Namespace }}'
    labels:
      app.kubernetes.io/instance: '{{ include "common.names.fullname" . }}'
      app.kubernetes.io/managed-by: '{{ .Release.Service }}'
      app.kubernetes.io/name: '{{ include "common.names.fullname" . }}'
    name: '{{ include "common.names.fullname" . }}-ag'
    namespace: '{{ .Release.Namespace }}'
  spec:
    ingressClassName: azure-application-gateway
    rules:
    - host: '{{ .Values.ingress.hostname }}'
      http:
        paths:
        - backend:
            service:
              name: '{{ include "common.names.fullname" . }}'
              port:
                name: app
          path: /
          pathType: Prefix
    tls:
    - hosts:
      - '{{ .Values.ingress.hostname }}'
      secretName: '{{ .Values.ingress.existingTlsSecret }}'