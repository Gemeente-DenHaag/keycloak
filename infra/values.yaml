image:
  registry: "crzgwpweu01.azurecr.io"
  repository: "zgw/keycloak-with-theme"
  tag: 
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent

# sidecar:
#   name: netshoot
#   repository: nicolaka/netshoot
#   tag: latest
#   args:
#   - sleep
#   - '999'
#   containerSecurityContext:
#     enabled: false
#     runAsNonRoot: false
#     allowPrivilegeEscalation: true
#     capabilities:
#       add:
#       - NET_ADMIN
#       - NET_RAW

## Specifies the application name (required to be set)
##
name: "keycloak"

## Specifies the application resource kind
##
appKind: Deployment

## Controls whether the container automatically mounts the ServiceAccount's API credentials
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting
automountServiceAccountToken: false

## Optionally, change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
## By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
## to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
##
dnsPolicy: ClusterFirst

## Pod securityContext
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true

## Container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
##
## containerSecurityContext:
##   capabilities:
##     drop:
##     - ALL
##   readOnlyRootFilesystem: true
##   runAsNonRoot: true
##   runAsUser: 1001
##   allowPrivilegeEscalation: false
##
containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

## Application service parameters
##
service:
  ## Kubernetes service type and port number
  ##
  type: ClusterIP
  # clusterIP: None

  ## Specify the default service port and targetPort
  ## Note: port or ports must be provided to enable service!
  ##
  port: 8080
  targetPort: 8080

## Set up update strategy for Kibana installation. Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to makesure the pods are destroyed first.
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  type: RollingUpdate

## Configure the ingress resource that allows you to access the
## app installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: true

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## Ingress Path type
  ##
  pathType: Prefix

  ingressClassName: nginx

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## The Path to Nginx. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: /

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: true

##  We usually recommend not to specify default resources and to leave this as a conscious
##  choice for the user. This also increases chances charts run on environments with little
##  resources, such as Minikube. If you do want to specify resources, uncomment the following
##  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
##
# resources:
#   limits:
#     cpu: 2000m
#     memory: 2Gi
#   requests:
#     cpu: 500m
#     memory: 1Gi

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Array of sources to populate environment variables in the container from
## Ref: https://v1-18.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.18/#envfromsource-v1-core
##
## envFrom:
##   - configMapRef:
##       name: special-config
##   - secretRef:
##       name: '{{ include "app.fullname" . }}-env'
##
envFrom:
  - secretRef:
       name: '{{ include "app.fullname" . }}'

## Configure options for liveness and readiness probes
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
## Note: probes are disabled by default and have no checks defined
##
livenessProbe:
  enabled: true
  httpGet:
    path: /health/live
    port: 8080
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessProbe:
  enabled: true
  httpGet:
    path: /health/ready
    port: 8080
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# fix for readOnlyRootFilesystem
volumes:
- name: tmpfs-1
  emptyDir: {}
# - name: tmpfs-2
#   emptyDir: {}

volumeMounts:
  - mountPath: /tmp
    name: tmpfs-1
  - mountPath: /opt/keycloak/data/tmp
    name: tmpfs-1